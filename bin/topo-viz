#!/usr/bin/env python

import sys
import os
import argparse

from bson import json_util
import json

from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE,SIG_DFL) 

# patch sys.path to fix import errors
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(PROJECT_DIR)

from topogram.vizparsers.time_series import TimeSeries
from topogram.vizparsers.network import Network


if __name__ == "__main__":

    # parse command line arguments
    p = argparse.ArgumentParser()

    p.add_argument("-v", "--vizmodel", help='Specifies the processor to use. Available : timeseries, network', required=True)
    p.add_argument("-c", "--config", help='Config for the processor.',default="minute")
    p.add_argument('--format', '-j', default="json")

    # in/out format with default to stdin / stdout
    p.add_argument( '-i' ,'--infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin, help='Specifies the intput file.  The default is stdin.')
    p.add_argument( "-o" ,'--outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout, help='Specifies the output file.  The default is stdout.')

    # get cli args
    args = p.parse_args(sys.argv[1:])
    
    if args.vizmodel == "timeseries":
        viz = TimeSeries(timescale=args.config)
    elif args.vizmodel == "network":
        viz = Network(args.config)
    else :
        raise NotImplemented("This option doesn't exist")

    # make sure everything is processed line by line
    if args.infile is sys.stdin :
        for line in sys.stdin: 
            if args.format == "json":
                row = json.loads(line, object_hook=json_util.object_hook)
                viz(row)
    if args.outfile is sys.stdout : 
        sys.stdout.write( json.dumps(viz.to_JSON()) ) 
    else :
        json.dump(viz.to_JSON(), args.outfile )
